-------------------------------------------------------------------------------------
-ClamAV for antivirus
-------------------------------------------------------------------------------------
update: sudo freshclam
scan:   clamscan -r /home
clamscan -r /
clamscan -r --bell -i /
clamscan -r /folder/to/scan | grep FOUND >> /path/to/save/report/file.txt

-------------------------------------------------------------------------------------
- GIT
-------------------------------------------------------------------------------------
For a new directory:
git init
git remote add origin https://github.com/foo74/<repo>.git
git pull origin master

After editing:
git status
git add .
git commit -m 'my message'
git push -u origin master



After your Github repository has been created (i.e. you can view it on Github), then you should already have:

    Local repository set up: git init
    README file created and added to the repository:

    touch README
    git add README
    git commit -m 'first commit'

    A remote called origin linked to your repository:

    git remote add origin https://github.com/username/repo.git

    An initial push, which copied your local README to your Github repository:

    git push -u origin master

If you can view your repository on Github, then it has been successfully created. In this case it looks like you may have edited your README file on Github using the online editing tools, which caused your remote and local branches to diverge. Before you can push your local changes to Github, you need to fetch or pull your remote changes, merge the changes locally (merging is automatic with pull), and then push to the remote.

See Pro Git: Fetching and Pulling from Your Remotes

-----------------------------------------------------------------------------------
- VIM
-----------------------------------------------------------------------------------
Use VIM command to format JSON: :%!python -m json.tool

Set line numbers and set tabs to be 3 spaces. Add the following to .vimrc
set number
set tabstop=3 shiftwidth=4 expandtab

-----------------------------------------------------------------------------------
- NMAP
-----------------------------------------------------------------------------------
To see which hosts are up, uses Ping Scan:
nmap -sP 192.168.0.0/24

-----------------------------------------------------------------------------------
- LINUX
-----------------------------------------------------------------------------------
Change the size of the stack in /etc/security/limits.conf
add line below then relog.
<user>   soft  stack 16384

Can also increase stack size with command line.
To see current size: ulimit -a
To increase: ulimit -s 65536

View hardware with sudo lshw   and use -C network flag to see network info.

Restart WIFI:
sudo systemctl restart network-manager.service

Create a disk for virtualbox:
vboxmanage createhd --filename test2disk.vdi --size 100 --variant fixed

Delete a disk for virtualbox:
vboxmanage list hdds
vboxmanage closemedium disk <uuid> --delete


-----------
- ENCRYPTION
--------------------
To encrypt a file:
gpg -c --cipher-algo AES256 file_to_encrypt

To decrypt a file:
gpg file_to_encrypt.gpg

To encrypt a directory, first create a zipped tar.
tar -cvf my_secret_dir.tar my_secret_dir
gzip my_secret_dir.tar
gpg -c --cipher-algo AES256 my_secret_dir.tar.gz

To import a key:
gpg --keyserver <key_server> --recv <key_id>
Example:
gpg --keyserver keyring.debian.org --recv 6294BE9B

To check a signature:
gpg --verify doc.sign doc
Example:
gpg --verify SHA512SUMS.sign SHA512SUMS

--------------------
- MEASURES
-------------------
A KiloByte (KB) is 10^3 = 1000 bytes.
A KibiByte (KiB) is 2^10 = 1024 bytes.
A Kilobit (Kb) is 10^3 bits = 1000 bits (but 8 bits in a byte so 1000/8 = 125 bytes).

----------------
- PATCHING 
----------------
Patches use diff and the patch tools:
http://www.thegeekstuff.com/2014/12/patch-command-examples/ 

-----------------
- UEFI
-----------------
Unified Extensible Firmware Interface (UEFI) is a replacement for BIOS.
EFI was the first version, UEFI is the second version. But most people
just say EFI and mean UEFI.
- Best info I have found is at rodsbooks.com. In particular the 
topic: http://rodsbooks.com/efi-bootloaders

- Create a 550MiB to guard against the MiB/MB rounding issue. See notes above.
- Should be type GPT partition scheme and the EFI System partition type and
of type FAT 32.
- fdisk /dev/sdb
- Then make a new GPT table, then a new partition that is +550MiB and of 
type EFI System (first option type).
- Then use mkfs.fat back in shell to create the file system as 32 bit FAT.
mkfs.fat -F 32 /dev/sdb1
- Then mount the ESP and make directory /EFI. Then each bootloader will
have its own directory. Example /EFI/ubuntu or EFI/debian, etc.. As Rod
points out many Linux systems will mount this ESP to /boot/efi so the
result is /boot/efi/EFI/ubuntu, etc... Arch Linux users like to mount
to /boot so the result is /boot/EFI/arch, etc... *Note that on FAT
filesystem the case matters. These bootloader directories contain the bootloader
file that ends in .efi and also any associated files, such as the RAM DISK that
Linux often uses to set things up as the kernel boots (initrd). Read Rod's
write-up for excellent coverage here.
- There is also a fallback .efi in /EFI/BOOT/bootx64.efi.
This is the fallback location if the EFI boot manager cannot find any .efi
boot loaders to boot.
Should be named bootx64.efi. See Rod's page for more info.

------------------
- FOOLIX LINUX NOTES
------------------
MISC NOTES:
This will be an EFI based distro for now. Need to create the /EFI/foolix directory
on the ESP to hold the efi boot loader info.
First step is to just boot kernel to shell.

http://unix.stackexchange.com/questions/136278/what-are-the-minimum-root-filesystem-applications-that-are-required-to-fully-boo
https://sites.google.com/site/4utils/articles/minimal_linux_system/minimal-linux-system-from-scratch
http://www.rodsbooks.com
http://www.cyberciti.biz/tips/10-boot-time-parameters-you-should-know-about-the-linux-kernel.html 

INIT:
http://unix.stackexchange.com/questions/146284/minimal-linux-with-kernel-and-busybox-etc-inittab-is-ignored-only-init-is-ex
https://wiki.openwrt.org/doc/techref/process.boot
https://busybox.net/FAQ.html#init

FSTAB:
https://wiki.archlinux.org/index.php/fstab


Note that systemd does NOT use the /etc/inittab file.

Not sure I want to go with systemd.
Need to learn SYSTEMD. Look at LFS for systemd for details on how it works.

Passing parameters to kernel to influence its behavior:
https://wiki.archlinux.org/index.php/kernel_parameters

